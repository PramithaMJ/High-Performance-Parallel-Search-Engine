Source URL: https://medium.com/@lpramithamj/linux-wake-up-call-what-happens-before-you-see-the-login-screen-e5f2089c3ad6



# Linux Wake-Up Call: What Happens Before You See the Login Screen

Pramitha Jayasooriya4 min read·Feb 23, 2025--ListenSharePress Power, Grab Coffee, and Watch Linux Do Its MagicSource: Generated By AILinux Boot Process Steps

# 1. Powering On and Firmware Initialization



# BIOS and UEFI: The System Firmware

The first stage of the boot process begins when the computer receives power. The motherboard firmware, either BIOS (Basic Input/Output System) or UEFI (Unified Extensible Firmware Interface), initializes the hardware.

## BIOS (Basic Input/Output System)

BIOS is stored on a non-volatile EPROM (Erasable Programmable Read-Only Memory) chip on the motherboard. It checks settings stored in the CMOS (Complementary Metal-Oxide-Semiconductor) chip. The CMOS battery maintains BIOS settings when the computer is powered off. BIOS uses the Master Boot Record (MBR) system, limiting disk size to 2TB. It performs the Power-On Self-Test (POST) to verify that CPU, RAM, GPU, and peripherals are functional. If POST fails, an error message or beep codes indicate the problem. Once POST passes, BIOS searches for a bootable device and loads the bootloader from the first sector of the selected storage device.

## UEFI (Unified Extensible Firmware Interface)

UEFI is a modern replacement for BIOS, designed to overcome its limitations. It stores boot-related data in a .efi file on a special disk partition called the EFI System Partition (ESP). UEFI supports GUID Partition Table (GPT), allowing for larger disk sizes. It provides a graphical interface and supports mouse input. Secure Boot prevents the execution of unauthorized operating systems. Like BIOS, UEFI performs a POST check and then loads the bootloader.

# 2. Bootloader Execution

After firmware initialization, the system loads the bootloader, responsible for finding and starting the operating system kernel.

# GRUB2: The Most Common Bootloader

GRUB2 (Grand Unified Bootloader 2) is the most widely used Linux bootloader. It supports booting multiple operating systems and offers a graphical/text-based menu. The bootloader’s tasks include:

Locating the Linux kernel on disk.

Loading the kernel into memory.

Passing control to the kernel.The boot order can be customized in BIOS/UEFI settings. The first sector of the hard drive, called the Master Boot Record (MBR), contains the bootloader’s first stage. GRUB2 reads configuration files (usually /boot/grub/grub.cfg) to determine available boot options.

# 3. Kernel Initialization

Once GRUB2 loads the kernel, it takes control of the system.Kernel Responsibilities

The Linux kernel is a compressed binary that extracts itself into memory.

It detects and initializes hardware components.

The kernel loads necessary drivers (kernel modules) for devices.

It mounts the root filesystem (/) to access system files.

The kernel starts the first user-space process, which is usually init.

# 4. Systemd and User-Space Initialization

The kernel hands control to the init system, which manages the rest of the boot process.Systemd: The Modern Init SystemMost Linux distributions use systemd as the init system.Systemd is responsible for:

Loading additional hardware drivers.

Mounting remaining filesystems.

Starting background services (networking, power management, sound, etc.).

Handling user logins.

Setting the system’s target (graphical or text mode).Systemd uses .service and .target files to define services and boot levels.

# 5. User Login and Desktop Environment

Once systemd has started all necessary services, the system reaches the final stage.Graphical vs. Command-Line Login

If the system boots into graphical mode, a Display Manager (GDM, SDDM, or LightDM) provides a graphical login screen.

If booting into text mode, a login prompt appears on the terminal (TTY).

Once the user logs in, their shell session or desktop environment starts, completing the boot process.

# Conclusion

Image Source: https://blog.bytebytego.com/The Linux boot process is a multi-step procedure involving firmware initialization, bootloader execution, kernel setup, and system initialization. Understanding each step can help troubleshoot boot failures and optimize performance. Whether using BIOS or UEFI, GRUB2 or another bootloader, Linux ensures a structured and efficient startup process.~ By Pramitha Jayasooriya

# Contact Details

For further information or to discuss potential opportunities, please feel free to connect with me on my professional and social platforms:

LinkedIn: https://www.linkedin.com/in/pramitha-jayasooriya/

Email: lpramithamj@gmail.com

GitHub: https://github.com/JayasooriyaLPM

Personal Website: https://pramithamj.meLooking forward to connecting with you!LinuxKernalBıosBootupUefi Bios----

## Written by Pramitha Jayasooriya

36 followers·47 followingAspiring Computer Engineer with a specialized focus on backend technologies. BSc. Eng . (Hons.) Degree in Computer Engineering (UG).

## No responses yet

HelpStatusAboutCareersPressBlogPrivacyRulesTermsText to speech 